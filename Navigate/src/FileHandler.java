import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

public class FileHandler {

	// ensure there is a folder called NavigateFolder with this path...
	// The FolderPath variable should end with ".../NavigateFolder/"
	private static String FolderPath = "C://Users//akhai//Documents/NavigateFolder/";
	// NumOfSaves.txt should be saved in NavigateFolder with an integer as it's contents
	// Do not edit this file - also avoid saving txt files in this folder as Tracelist(Integer)
	
	
	// Method to save current tracelist as TracelistX where X is an integer
	// Uses CreateFileName to calculate a corresponding file name
	public static void SaveTracelist(Tracelist TracelistToSave) throws IOException
	{
		String newFileName = CreateFileName();
		CreateNewFile(newFileName);		
		FileWriter writehandle = new FileWriter(FolderPath+newFileName);
	   
		// Get the time string in HH:MM:SS format
		DateFormat timeFormat=new SimpleDateFormat("HH:mm:ss");
		Calendar date = Calendar.getInstance(); //Factory
		String TimeString = timeFormat.format((date.getTime()));
		
		BufferedWriter bw = new BufferedWriter(writehandle);
	   
		// writes the time first, and then the commands in a new line after
		bw.write(TimeString);
		bw.newLine();
		bw.write(FormatTracelistToString(TracelistToSave));
		bw.close();
		
		writehandle.close();
	}
	
	public static void CreateNewFile(String FileName) throws IOException
	{
		File newFile = new File(FileName);
		newFile.createNewFile();
	}
	
	
	// Creates a unique filename for a tracelist about to be saved
	// Reads the integer inside the NumOfSaves.txt file and uses that as the ending integer
	// i.e If 5 was in NumOfSaves.txt, then it will be saved as Tracelist5
	// Then the program will increment this number and overwrite it as the new integer in NumOfSaves.txt
	public static String CreateFileName() throws IOException
	{
	   FileReader readhandle = new FileReader(FolderPath+"NumOfSaves.txt");
	   BufferedReader br = new BufferedReader(readhandle);
	   String line = null;
	   int FileNumber=0;
	   
	   while((line = br.readLine()) != null)
	   {
		   FileNumber = Integer.parseInt(line);
	   }
	   br.close();
	   readhandle.close();
	   
	   String FileName = "Tracelist"+FileNumber+".txt";
	   IncrementNumOfSaves(FileNumber);
	   return FileName;
	}
	
	
	// Needed to create a unique file name - Increment occurs after the unique file name is computed
	public static void IncrementNumOfSaves(int CurrentNumOfSaves) throws IOException
	{
		 FileWriter writehandle = new FileWriter(FolderPath+"NumOfSaves.txt");
		 BufferedWriter bw = new BufferedWriter(writehandle);
		 bw.write(Integer.toString(CurrentNumOfSaves+1));
		 bw.close();
		 writehandle.close();
	}
	
	
	// Function used to convert a tracelist into a singular string for simplicity
	public static String FormatTracelistToString(Tracelist TracelistParameter)
	{
		int Index = 0;
		int TracelistLength = TracelistParameter.GetTracelistLength();
		String CurrentCommandString;
		String FormattedTracelistString="";
		
		while ((Index == TracelistLength) == false)
		{
			CurrentCommandString = TracelistParameter.GetTracelistCommands().get(Index); // get command at current index
			if (Index != 0)
			{
				FormattedTracelistString = FormattedTracelistString+","; // add a comma before the command if it is not the first command
			}
			FormattedTracelistString = FormattedTracelistString + CurrentCommandString;
			Index++;
		}
		return FormattedTracelistString;
	}
	
	
	// Used by the Select File console to get the list of file names (excluding NumOfSaves.txt)
	public static String[] GetArrayOfFileNames()
	{
		File NavigateFolder = new File(FolderPath);
		File[] FilesArray = NavigateFolder.listFiles();
		ArrayList<String> FileNamesArrayList = new ArrayList<String>();

		for (File CurrentFile : FilesArray) // for each file in the FilesArray
		{
		    if (CurrentFile.isFile()) // if it is a file...
		    {
		    	if (CurrentFile.getName().compareTo("NumOfSaves.txt") != 0)
		    	{// If the file name isn't NumOfSaves.txt
		    		FileNamesArrayList.add(CurrentFile.getName()); // add it to the FileNamesArray
		    	}
		    }
		}
		
		String[] FileNamesArray = new String[FileNamesArrayList.size()]; // create an array the same size as the arraylist
		FileNamesArray = FileNamesArrayList.toArray(FileNamesArray); // assign the arraylist to the array
		
		return FileNamesArray;
	}
	
	
	// Needed to read a tracelist/ txt files command string
	// If array of size one with element  "" is returned, the file contains no commands
	public static String[]  ParseFileToArray(String FileName) throws IOException
	{
		  FileReader readhandle = new FileReader(FolderPath+FileName);
		  BufferedReader br = new BufferedReader(readhandle);
		  String line = null;
		  String CommandString = "";
		  String[] CommandStringArray;
		   
		  line = br.readLine();
		  if (line == null)
			  System.out.println("Empty textfile selected!");
		  else
		  {
			  // block of code to ignore the date saved in a file (using the Write Command)
			  if (line.matches("\\d{2}:\\d{2}:\\d{2}")) // double slashes needed for regex so program does not think they are escape characters
			  {
				  System.out.println("Date detected in selected textfile - moving to next line");
				  line = br.readLine();
			  }
			  if (line != null) // extra check needed to see if a string exists after the date
			  {
				  CommandString = line;
			  }
		  }
		  br.close();
		  readhandle.close();
		  CommandStringArray = CommandString.split(",");
		  return CommandStringArray;
	}
	
	
	
	public static String GetFolderPath()
	{
		return FolderPath;
	}
	
}
